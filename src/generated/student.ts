// @generated by protobuf-ts 2.9.1
// @generated from protobuf file "student.proto" (package "com.example", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message com.example.StudentRequest
 */
export interface StudentRequest {
    /**
     * @generated from protobuf field: int32 id = 1;
     */
    id: number;
}
/**
 * @generated from protobuf message com.example.CreateOrUpdateStudentRequest
 */
export interface CreateOrUpdateStudentRequest {
    /**
     * @generated from protobuf field: int32 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string level = 3;
     */
    level: string;
    /**
     * @generated from protobuf field: string grade = 4;
     */
    grade: string;
    /**
     * @generated from protobuf field: int32 marks = 5;
     */
    marks: number;
}
/**
 * @generated from protobuf message com.example.EmptyRequest
 */
export interface EmptyRequest {
}
/**
 * @generated from protobuf message com.example.StudentReply
 */
export interface StudentReply {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string level = 2;
     */
    level: string;
    /**
     * @generated from protobuf field: string grade = 3;
     */
    grade: string;
    /**
     * @generated from protobuf field: int32 marks = 4;
     */
    marks: number;
    /**
     * @generated from protobuf field: int32 id = 5;
     */
    id: number;
}
/**
 * @generated from protobuf message com.example.StudentResponse
 */
export interface StudentResponse {
    /**
     * @generated from protobuf field: repeated com.example.StudentReply studentReply = 1;
     */
    studentReply: StudentReply[];
}
// @generated message type with reflection information, may provide speed optimized methods
class StudentRequest$Type extends MessageType<StudentRequest> {
    constructor() {
        super("com.example.StudentRequest", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<StudentRequest>): StudentRequest {
        const message = { id: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StudentRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StudentRequest): StudentRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StudentRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.example.StudentRequest
 */
export const StudentRequest = new StudentRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateOrUpdateStudentRequest$Type extends MessageType<CreateOrUpdateStudentRequest> {
    constructor() {
        super("com.example.CreateOrUpdateStudentRequest", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "level", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "grade", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "marks", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CreateOrUpdateStudentRequest>): CreateOrUpdateStudentRequest {
        const message = { id: 0, name: "", level: "", grade: "", marks: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateOrUpdateStudentRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateOrUpdateStudentRequest): CreateOrUpdateStudentRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string level */ 3:
                    message.level = reader.string();
                    break;
                case /* string grade */ 4:
                    message.grade = reader.string();
                    break;
                case /* int32 marks */ 5:
                    message.marks = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateOrUpdateStudentRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string level = 3; */
        if (message.level !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.level);
        /* string grade = 4; */
        if (message.grade !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.grade);
        /* int32 marks = 5; */
        if (message.marks !== 0)
            writer.tag(5, WireType.Varint).int32(message.marks);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.example.CreateOrUpdateStudentRequest
 */
export const CreateOrUpdateStudentRequest = new CreateOrUpdateStudentRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EmptyRequest$Type extends MessageType<EmptyRequest> {
    constructor() {
        super("com.example.EmptyRequest", []);
    }
    create(value?: PartialMessage<EmptyRequest>): EmptyRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EmptyRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EmptyRequest): EmptyRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: EmptyRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.example.EmptyRequest
 */
export const EmptyRequest = new EmptyRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StudentReply$Type extends MessageType<StudentReply> {
    constructor() {
        super("com.example.StudentReply", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "level", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "grade", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "marks", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<StudentReply>): StudentReply {
        const message = { name: "", level: "", grade: "", marks: 0, id: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StudentReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StudentReply): StudentReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string level */ 2:
                    message.level = reader.string();
                    break;
                case /* string grade */ 3:
                    message.grade = reader.string();
                    break;
                case /* int32 marks */ 4:
                    message.marks = reader.int32();
                    break;
                case /* int32 id */ 5:
                    message.id = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StudentReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string level = 2; */
        if (message.level !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.level);
        /* string grade = 3; */
        if (message.grade !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.grade);
        /* int32 marks = 4; */
        if (message.marks !== 0)
            writer.tag(4, WireType.Varint).int32(message.marks);
        /* int32 id = 5; */
        if (message.id !== 0)
            writer.tag(5, WireType.Varint).int32(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.example.StudentReply
 */
export const StudentReply = new StudentReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StudentResponse$Type extends MessageType<StudentResponse> {
    constructor() {
        super("com.example.StudentResponse", [
            { no: 1, name: "studentReply", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => StudentReply }
        ]);
    }
    create(value?: PartialMessage<StudentResponse>): StudentResponse {
        const message = { studentReply: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StudentResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StudentResponse): StudentResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.example.StudentReply studentReply */ 1:
                    message.studentReply.push(StudentReply.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StudentResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.example.StudentReply studentReply = 1; */
        for (let i = 0; i < message.studentReply.length; i++)
            StudentReply.internalBinaryWrite(message.studentReply[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.example.StudentResponse
 */
export const StudentResponse = new StudentResponse$Type();
/**
 * @generated ServiceType for protobuf service com.example.StudentService
 */
export const StudentService = new ServiceType("com.example.StudentService", [
    { name: "addStudentDetails", options: {}, I: CreateOrUpdateStudentRequest, O: StudentReply },
    { name: "getStudentDetails", options: {}, I: StudentRequest, O: StudentReply },
    { name: "editStudentDetails", options: {}, I: CreateOrUpdateStudentRequest, O: StudentReply },
    { name: "deleteStudentDetails", options: {}, I: StudentRequest, O: StudentReply },
    { name: "listStudentsDetails", serverStreaming: true, options: {}, I: EmptyRequest, O: StudentReply }
]);
