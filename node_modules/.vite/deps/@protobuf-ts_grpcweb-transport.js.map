{
  "version": 3,
  "sources": ["../../@protobuf-ts/grpcweb-transport/build/es2015/goog-grpc-status-code.js", "../../@protobuf-ts/grpcweb-transport/build/es2015/grpc-web-format.js", "../../@protobuf-ts/grpcweb-transport/build/es2015/grpc-web-transport.js"],
  "sourcesContent": ["// Copyright 2016 gRPC authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * See [grpc status_code_enum.h](https://github.com/grpc/grpc/blob/a19d8dcfb50caa81cddc25bc1a6afdd7a2f497b7/include/grpcpp/impl/codegen/status_code_enum.h#L24)\n *\n * Copyright 2020 Google LLC\n */\nexport var GrpcStatusCode;\n(function (GrpcStatusCode) {\n    /**\n     * Not an error; returned on success.\n     */\n    GrpcStatusCode[GrpcStatusCode[\"OK\"] = 0] = \"OK\";\n    /**\n     * The operation was cancelled (typically by the caller).\n     */\n    GrpcStatusCode[GrpcStatusCode[\"CANCELLED\"] = 1] = \"CANCELLED\";\n    /**\n     * Unknown error. An example of where this error may be returned is if a\n     * Status value received from another address space belongs to an error-space\n     * that is not known in this address space. Also errors raised by APIs that\n     * do not return enough error information may be converted to this error.\n     */\n    GrpcStatusCode[GrpcStatusCode[\"UNKNOWN\"] = 2] = \"UNKNOWN\";\n    /**\n     * Client specified an invalid argument. Note that this differs from\n     * FAILED_PRECONDITION. INVALID_ARGUMENT indicates arguments that are\n     * problematic regardless of the state of the system (e.g., a malformed file\n     * name).\n     */\n    GrpcStatusCode[GrpcStatusCode[\"INVALID_ARGUMENT\"] = 3] = \"INVALID_ARGUMENT\";\n    /**\n     * Deadline expired before operation could complete. For operations that\n     * change the state of the system, this error may be returned even if the\n     * operation has completed successfully. For example, a successful response\n     * from a server could have been delayed long enough for the deadline to\n     * expire.\n     */\n    GrpcStatusCode[GrpcStatusCode[\"DEADLINE_EXCEEDED\"] = 4] = \"DEADLINE_EXCEEDED\";\n    /**\n     * Some requested entity (e.g., file or directory) was not found.\n     */\n    GrpcStatusCode[GrpcStatusCode[\"NOT_FOUND\"] = 5] = \"NOT_FOUND\";\n    /**\n     * Some entity that we attempted to create (e.g., file or directory) already\n     * exists.\n     */\n    GrpcStatusCode[GrpcStatusCode[\"ALREADY_EXISTS\"] = 6] = \"ALREADY_EXISTS\";\n    /**\n     * The caller does not have permission to execute the specified operation.\n     * PERMISSION_DENIED must not be used for rejections caused by exhausting\n     * some resource (use RESOURCE_EXHAUSTED instead for those errors).\n     * PERMISSION_DENIED must not be used if the caller can not be identified\n     * (use UNAUTHENTICATED instead for those errors).\n     */\n    GrpcStatusCode[GrpcStatusCode[\"PERMISSION_DENIED\"] = 7] = \"PERMISSION_DENIED\";\n    /**\n     * The request does not have valid authentication credentials for the\n     * operation.\n     */\n    GrpcStatusCode[GrpcStatusCode[\"UNAUTHENTICATED\"] = 16] = \"UNAUTHENTICATED\";\n    /**\n     * Some resource has been exhausted, perhaps a per-user quota, or perhaps the\n     * entire file system is out of space.\n     */\n    GrpcStatusCode[GrpcStatusCode[\"RESOURCE_EXHAUSTED\"] = 8] = \"RESOURCE_EXHAUSTED\";\n    /**\n     * Operation was rejected because the system is not in a state required for\n     * the operations execution. For example, directory to be deleted may be\n     * non-empty, an rmdir operation is applied to a non-directory, etc.\n     *\n     * A litmus test that may help a service implementor in deciding\n     * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:\n     *  (a) Use UNAVAILABLE if the client can retry just the failing call.\n     *  (b) Use ABORTED if the client should retry at a higher-level\n     *      (e.g., restarting a read-modify-write sequence).\n     *  (c) Use FAILED_PRECONDITION if the client should not retry until\n     *      the system state has been explicitly fixed. E.g., if an \"rmdir\"\n     *      fails because the directory is non-empty, FAILED_PRECONDITION\n     *      should be returned since the client should not retry unless\n     *      they have first fixed up the directory by deleting files from it.\n     *  (d) Use FAILED_PRECONDITION if the client performs conditional\n     *      REST Get/Update/Delete on a resource and the resource on the\n     *      server does not match the condition. E.g., conflicting\n     *      read-modify-write on the same resource.\n     */\n    GrpcStatusCode[GrpcStatusCode[\"FAILED_PRECONDITION\"] = 9] = \"FAILED_PRECONDITION\";\n    /**\n     * The operation was aborted, typically due to a concurrency issue like\n     * sequencer check failures, transaction aborts, etc.\n     *\n     * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,\n     * and UNAVAILABLE.\n     */\n    GrpcStatusCode[GrpcStatusCode[\"ABORTED\"] = 10] = \"ABORTED\";\n    /**\n     * Operation was attempted past the valid range. E.g., seeking or reading\n     * past end of file.\n     *\n     * Unlike INVALID_ARGUMENT, this error indicates a problem that may be fixed\n     * if the system state changes. For example, a 32-bit file system will\n     * generate INVALID_ARGUMENT if asked to read at an offset that is not in the\n     * range [0,2^32-1], but it will generate OUT_OF_RANGE if asked to read from\n     * an offset past the current file size.\n     *\n     * There is a fair bit of overlap between FAILED_PRECONDITION and\n     * OUT_OF_RANGE. We recommend using OUT_OF_RANGE (the more specific error)\n     * when it applies so that callers who are iterating through a space can\n     * easily look for an OUT_OF_RANGE error to detect when they are done.\n     */\n    GrpcStatusCode[GrpcStatusCode[\"OUT_OF_RANGE\"] = 11] = \"OUT_OF_RANGE\";\n    /**\n     * Operation is not implemented or not supported/enabled in this service.\n     */\n    GrpcStatusCode[GrpcStatusCode[\"UNIMPLEMENTED\"] = 12] = \"UNIMPLEMENTED\";\n    /**\n     * Internal errors. Means some invariants expected by underlying System has\n     * been broken. If you see one of these errors, Something is very broken.\n     */\n    GrpcStatusCode[GrpcStatusCode[\"INTERNAL\"] = 13] = \"INTERNAL\";\n    /**\n     * The service is currently unavailable. This is a most likely a transient\n     * condition and may be corrected by retrying with a backoff.\n     *\n     * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,\n     * and UNAVAILABLE.\n     */\n    GrpcStatusCode[GrpcStatusCode[\"UNAVAILABLE\"] = 14] = \"UNAVAILABLE\";\n    /**\n     * Unrecoverable data loss or corruption.\n     */\n    GrpcStatusCode[GrpcStatusCode[\"DATA_LOSS\"] = 15] = \"DATA_LOSS\";\n})(GrpcStatusCode || (GrpcStatusCode = {}));\n", "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { base64decode, base64encode } from \"@protobuf-ts/runtime\";\nimport { RpcError } from \"@protobuf-ts/runtime-rpc\";\nimport { GrpcStatusCode } from \"./goog-grpc-status-code\";\n/**\n * Create fetch API headers for a grpc-web request.\n */\nexport function createGrpcWebRequestHeader(headers, format, timeout, meta, userAgent) {\n    // add meta as headers\n    if (meta) {\n        for (let [k, v] of Object.entries(meta)) {\n            if (typeof v == \"string\")\n                headers.append(k, v);\n            else\n                for (let i of v)\n                    headers.append(k, i);\n        }\n    }\n    // set standard headers (possibly overwriting meta)\n    headers.set('Content-Type', format === \"text\" ? \"application/grpc-web-text\" : \"application/grpc-web+proto\");\n    if (format == \"text\") {\n        // The client library should indicate to the server via the \"Accept\" header that\n        // the response stream needs to be text encoded e.g. when XHR is used or due to\n        // security policies with XHR\n        headers.set(\"Accept\", \"application/grpc-web-text\");\n    }\n    headers.set('X-Grpc-Web', \"1\");\n    if (userAgent)\n        headers.set(\"X-User-Agent\", userAgent);\n    if (typeof timeout === \"number\") {\n        if (timeout <= 0) {\n            // we raise an error ourselves because header \"grpc-timeout\" must be a positive integer\n            throw new RpcError(`timeout ${timeout} ms exceeded`, GrpcStatusCode[GrpcStatusCode.DEADLINE_EXCEEDED]);\n        }\n        headers.set('grpc-timeout', `${timeout}m`);\n    }\n    else if (timeout) {\n        const deadline = timeout.getTime();\n        const now = Date.now();\n        if (deadline <= now) {\n            // we raise an error ourselves because header \"grpc-timeout\" must be a positive integer\n            throw new RpcError(`deadline ${timeout} exceeded`, GrpcStatusCode[GrpcStatusCode.DEADLINE_EXCEEDED]);\n        }\n        headers.set('grpc-timeout', `${deadline - now}m`);\n    }\n    return headers;\n}\nexport function createGrpcWebRequestBody(message, format) {\n    let body = new Uint8Array(5 + message.length); // we need 5 bytes for frame type + message length\n    body[0] = GrpcWebFrame.DATA; // first byte is frame type\n    // 4 bytes message length\n    for (let msgLen = message.length, i = 4; i > 0; i--) {\n        body[i] = (msgLen % 256);\n        msgLen >>>= 8;\n    }\n    body.set(message, 5); // reset is message\n    return format === \"binary\" ? body : base64encode(body);\n}\nexport function readGrpcWebResponseHeader(headersOrFetchResponse, httpStatus, httpStatusText) {\n    if (arguments.length === 1) {\n        let fetchResponse = headersOrFetchResponse;\n        // Cloudflare Workers throw when the type property of a fetch response\n        // is accessed, so wrap access with try/catch. See:\n        // * https://developers.cloudflare.com/workers/runtime-apis/response/#properties\n        // * https://github.com/cloudflare/miniflare/blob/72f046e/packages/core/src/standards/http.ts#L646\n        let responseType;\n        try {\n            responseType = fetchResponse.type;\n        }\n        catch (_a) { }\n        switch (responseType) {\n            case \"error\":\n            case \"opaque\":\n            case \"opaqueredirect\":\n                // see https://developer.mozilla.org/en-US/docs/Web/API/Response/type\n                throw new RpcError(`fetch response type ${fetchResponse.type}`, GrpcStatusCode[GrpcStatusCode.UNKNOWN]);\n        }\n        return readGrpcWebResponseHeader(fetchHeadersToHttp(fetchResponse.headers), fetchResponse.status, fetchResponse.statusText);\n    }\n    let headers = headersOrFetchResponse, httpOk = httpStatus >= 200 && httpStatus < 300, responseMeta = parseMetadata(headers), [statusCode, statusDetail] = parseStatus(headers);\n    if ((statusCode === undefined || statusCode === GrpcStatusCode.OK) && !httpOk) {\n        statusCode = httpStatusToGrpc(httpStatus);\n        statusDetail = httpStatusText;\n    }\n    return [statusCode, statusDetail, responseMeta];\n}\n/**\n * Parses a grpc status (code and optional text) and meta data from response\n * trailers.\n *\n * Response trailers are expected as a byte array, but are actually just an\n * ASCII string with HTTP headers. Just pass the data of a grpc-web trailer\n * frame.\n */\nexport function readGrpcWebResponseTrailer(data) {\n    let headers = parseTrailer(data), [code, detail] = parseStatus(headers), meta = parseMetadata(headers);\n    return [code !== null && code !== void 0 ? code : GrpcStatusCode.OK, detail, meta];\n}\n/**\n * A grpc-frame type. Can be used to determine type of frame emitted by\n * `readGrpcWebResponseBody()`.\n */\nexport var GrpcWebFrame;\n(function (GrpcWebFrame) {\n    GrpcWebFrame[GrpcWebFrame[\"DATA\"] = 0] = \"DATA\";\n    GrpcWebFrame[GrpcWebFrame[\"TRAILER\"] = 128] = \"TRAILER\";\n})(GrpcWebFrame || (GrpcWebFrame = {}));\n/**\n * Parses a grpc-web response (unary or server streaming) from a fetch API\n * stream.\n *\n * Emits grpc-web frames.\n *\n * The returned promise resolves when the response is complete.\n */\nexport function readGrpcWebResponseBody(stream, contentType, onFrame) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let streamReader, base64queue = \"\", byteQueue = new Uint8Array(0), format = parseFormat(contentType);\n        // allows to read streams from the 'node-fetch' polyfill which uses\n        // node.js ReadableStream instead of the what-wg streams api ReadableStream\n        if (isReadableStream(stream)) {\n            let whatWgReadableStream = stream.getReader();\n            streamReader = {\n                next: () => whatWgReadableStream.read()\n            };\n        }\n        else {\n            streamReader = stream[Symbol.asyncIterator]();\n        }\n        while (true) {\n            let result = yield streamReader.next();\n            if (result.value !== undefined) {\n                if (format === \"text\") {\n                    // the statements below just decode base64 and append to `bytesUnread`\n                    // add incoming base64 to queue\n                    for (let i = 0; i < result.value.length; i++)\n                        base64queue += String.fromCharCode(result.value[i]);\n                    // if the base64 queue is not a multiple of 4,\n                    // we have to wait for more data\n                    let safeLen = base64queue.length - base64queue.length % 4;\n                    if (safeLen === 0)\n                        continue;\n                    // decode safe chunk of base64 and add to byte queue\n                    byteQueue = concatBytes(byteQueue, base64decode(base64queue.substring(0, safeLen)));\n                    base64queue = base64queue.substring(safeLen);\n                }\n                else {\n                    byteQueue = concatBytes(byteQueue, result.value);\n                }\n                // read all fully available data frames\n                while (byteQueue.length >= 5 && byteQueue[0] === GrpcWebFrame.DATA) {\n                    let msgLen = 0;\n                    for (let i = 1; i < 5; i++)\n                        msgLen = (msgLen << 8) + byteQueue[i];\n                    if (byteQueue.length - 5 >= msgLen) {\n                        // we have the entire message\n                        onFrame(GrpcWebFrame.DATA, byteQueue.subarray(5, 5 + msgLen));\n                        byteQueue = byteQueue.subarray(5 + msgLen);\n                    }\n                    else\n                        break; //  wait for more data\n                }\n            }\n            // exit, but emit trailer if exists\n            if (result.done) {\n                if (byteQueue.length === 0)\n                    break;\n                if (byteQueue[0] !== GrpcWebFrame.TRAILER || byteQueue.length < 5)\n                    throw new RpcError(\"premature EOF\", GrpcStatusCode[GrpcStatusCode.DATA_LOSS]);\n                onFrame(GrpcWebFrame.TRAILER, byteQueue.subarray(5));\n                break;\n            }\n        }\n    });\n}\n// internal\nconst isReadableStream = (s) => {\n    return typeof s.getReader == \"function\";\n};\n// internal\nfunction concatBytes(a, b) {\n    let n = new Uint8Array(a.length + b.length);\n    n.set(a);\n    n.set(b, a.length);\n    return n;\n}\n// determines format from response \"content-type\" value.\n// throws if value is unknown or missing.\nfunction parseFormat(contentType) {\n    // > the sender *should* always specify the message format, e.g. +proto, +json\n    //\n    // > the receiver should assume the default is \"+proto\" when the message format is\n    // > missing in Content-Type (as \"application/grpc-web\")\n    //\n    // see https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-WEB.md\n    switch (contentType) {\n        case \"application/grpc-web-text\":\n        case \"application/grpc-web-text+proto\":\n            return \"text\";\n        case \"application/grpc-web\":\n        case \"application/grpc-web+proto\":\n            return \"binary\";\n        case undefined:\n        case null:\n            throw new RpcError(\"missing response content type\", GrpcStatusCode[GrpcStatusCode.INTERNAL]);\n        default:\n            throw new RpcError(\"unexpected response content type: \" + contentType, GrpcStatusCode[GrpcStatusCode.INTERNAL]);\n    }\n}\n// returns error code on parse failure\nfunction parseStatus(headers) {\n    let code, message;\n    let m = headers['grpc-message'];\n    if (m !== undefined) {\n        if (Array.isArray(m))\n            return [GrpcStatusCode.INTERNAL, \"invalid grpc-web message\"];\n        message = m;\n    }\n    let s = headers['grpc-status'];\n    if (s !== undefined) {\n        if (Array.isArray(s))\n            return [GrpcStatusCode.INTERNAL, \"invalid grpc-web status\"];\n        code = parseInt(s, 10);\n        if (GrpcStatusCode[code] === undefined)\n            return [GrpcStatusCode.INTERNAL, \"invalid grpc-web status\"];\n    }\n    return [code, message];\n}\n// skips grpc-web headers\nfunction parseMetadata(headers) {\n    let meta = {};\n    for (let [k, v] of Object.entries(headers))\n        switch (k) {\n            case 'grpc-message':\n            case 'grpc-status':\n            case 'content-type':\n                break;\n            default:\n                meta[k] = v;\n        }\n    return meta;\n}\n// parse trailer data (ASCII) to our headers rep\nfunction parseTrailer(trailerData) {\n    let headers = {};\n    for (let chunk of String.fromCharCode.apply(String, trailerData).trim().split(\"\\r\\n\")) {\n        if (chunk == \"\")\n            continue;\n        let [key, ...val] = chunk.split(\":\");\n        const value = val.join(\":\").trim();\n        key = key.trim();\n        let e = headers[key];\n        if (typeof e == \"string\")\n            headers[key] = [e, value];\n        else if (Array.isArray(e))\n            e.push(value);\n        else\n            headers[key] = value;\n    }\n    return headers;\n}\n// fetch API to our headers rep\nfunction fetchHeadersToHttp(fetchHeaders) {\n    let headers = {};\n    fetchHeaders.forEach((value, key) => {\n        let e = headers[key];\n        if (typeof e == \"string\")\n            headers[key] = [e, value];\n        else if (Array.isArray(e))\n            e.push(value);\n        else\n            headers[key] = value;\n    });\n    return headers;\n}\n// internal\nfunction httpStatusToGrpc(httpStatus) {\n    switch (httpStatus) {\n        case 200:\n            return GrpcStatusCode.OK;\n        case 400:\n            return GrpcStatusCode.INVALID_ARGUMENT;\n        case 401:\n            return GrpcStatusCode.UNAUTHENTICATED;\n        case 403:\n            return GrpcStatusCode.PERMISSION_DENIED;\n        case 404:\n            return GrpcStatusCode.NOT_FOUND;\n        case 409:\n            return GrpcStatusCode.ABORTED;\n        case 412:\n            return GrpcStatusCode.FAILED_PRECONDITION;\n        case 429:\n            return GrpcStatusCode.RESOURCE_EXHAUSTED;\n        case 499:\n            return GrpcStatusCode.CANCELLED;\n        case 500:\n            return GrpcStatusCode.UNKNOWN;\n        case 501:\n            return GrpcStatusCode.UNIMPLEMENTED;\n        case 503:\n            return GrpcStatusCode.UNAVAILABLE;\n        case 504:\n            return GrpcStatusCode.DEADLINE_EXCEEDED;\n        default:\n            return GrpcStatusCode.UNKNOWN;\n    }\n}\n", "import { Deferred, RpcError, RpcOutputStreamController, ServerStreamingCall, UnaryCall, mergeRpcOptions } from \"@protobuf-ts/runtime-rpc\";\nimport { GrpcWebFrame, createGrpcWebRequestBody, createGrpcWebRequestHeader, readGrpcWebResponseBody, readGrpcWebResponseHeader, readGrpcWebResponseTrailer } from \"./grpc-web-format\";\nimport { GrpcStatusCode } from \"./goog-grpc-status-code\";\n/**\n * Implements the grpc-web protocol, supporting text format or binary\n * format on the wire. Uses the fetch API to do the HTTP requests.\n *\n * Does not support client streaming or duplex calls because grpc-web\n * does not support them.\n */\nexport class GrpcWebFetchTransport {\n    constructor(defaultOptions) {\n        this.defaultOptions = defaultOptions;\n    }\n    mergeOptions(options) {\n        return mergeRpcOptions(this.defaultOptions, options);\n    }\n    /**\n     * Create an URI for a gRPC web call.\n     *\n     * Takes the `baseUrl` option and appends:\n     * - slash \"/\"\n     * - package name\n     * - dot \".\"\n     * - service name\n     * - slash \"/\"\n     * - method name\n     *\n     * If the service was declared without a package, the package name and dot\n     * are omitted.\n     *\n     * All names are used exactly like declared in .proto.\n     */\n    makeUrl(method, options) {\n        let base = options.baseUrl;\n        if (base.endsWith('/'))\n            base = base.substring(0, base.length - 1);\n        return `${base}/${method.service.typeName}/${method.name}`;\n    }\n    clientStreaming(method /*, options: RpcOptions*/) {\n        const e = new RpcError('Client streaming is not supported by grpc-web', GrpcStatusCode[GrpcStatusCode.UNIMPLEMENTED]);\n        e.methodName = method.name;\n        e.serviceName = method.service.typeName;\n        throw e;\n    }\n    duplex(method /*, options: RpcOptions*/) {\n        const e = new RpcError('Duplex streaming is not supported by grpc-web', GrpcStatusCode[GrpcStatusCode.UNIMPLEMENTED]);\n        e.methodName = method.name;\n        e.serviceName = method.service.typeName;\n        throw e;\n    }\n    serverStreaming(method, input, options) {\n        var _a, _b, _c, _d;\n        let opt = options, format = (_a = opt.format) !== null && _a !== void 0 ? _a : 'text', fetchInit = (_b = opt.fetchInit) !== null && _b !== void 0 ? _b : {}, url = this.makeUrl(method, opt), inputBytes = method.I.toBinary(input, opt.binaryOptions), defHeader = new Deferred(), responseStream = new RpcOutputStreamController(), responseEmptyBody = true, maybeStatus, defStatus = new Deferred(), maybeTrailer, defTrailer = new Deferred();\n        globalThis.fetch(url, Object.assign(Object.assign({}, fetchInit), { method: 'POST', headers: createGrpcWebRequestHeader(new globalThis.Headers(), format, opt.timeout, opt.meta), body: createGrpcWebRequestBody(inputBytes, format), signal: (_c = options.abort) !== null && _c !== void 0 ? _c : null // node-fetch@3.0.0-beta.9 rejects `undefined`\n         }))\n            .then(fetchResponse => {\n            let [code, detail, meta] = readGrpcWebResponseHeader(fetchResponse);\n            defHeader.resolve(meta);\n            if (code != null && code !== GrpcStatusCode.OK)\n                throw new RpcError(detail !== null && detail !== void 0 ? detail : GrpcStatusCode[code], GrpcStatusCode[code], meta);\n            if (code != null)\n                maybeStatus = {\n                    code: GrpcStatusCode[code],\n                    detail: detail !== null && detail !== void 0 ? detail : GrpcStatusCode[code]\n                };\n            return fetchResponse;\n        })\n            .then(fetchResponse => {\n            if (!fetchResponse.body)\n                throw new RpcError('missing response body', GrpcStatusCode[GrpcStatusCode.INTERNAL]);\n            return readGrpcWebResponseBody(fetchResponse.body, fetchResponse.headers.get('content-type'), (type, data) => {\n                switch (type) {\n                    case GrpcWebFrame.DATA:\n                        responseStream.notifyMessage(method.O.fromBinary(data, opt.binaryOptions));\n                        responseEmptyBody = false;\n                        break;\n                    case GrpcWebFrame.TRAILER:\n                        let code, detail;\n                        [code, detail, maybeTrailer] = readGrpcWebResponseTrailer(data);\n                        maybeStatus = {\n                            code: GrpcStatusCode[code],\n                            detail: detail !== null && detail !== void 0 ? detail : GrpcStatusCode[code]\n                        };\n                        break;\n                }\n            });\n        })\n            .then(() => {\n            if (!maybeTrailer && !responseEmptyBody)\n                throw new RpcError(`missing trailers`, GrpcStatusCode[GrpcStatusCode.DATA_LOSS]);\n            // istanbul ignore if - this should be impossible and only here to satisfy TypeScript\n            if (!maybeStatus)\n                throw new RpcError(`missing status`, GrpcStatusCode[GrpcStatusCode.INTERNAL]);\n            if (maybeStatus.code !== 'OK')\n                throw new RpcError(maybeStatus.detail, maybeStatus.code, maybeTrailer);\n            responseStream.notifyComplete();\n            defStatus.resolve(maybeStatus);\n            defTrailer.resolve(maybeTrailer || {});\n        })\n            .catch(reason => {\n            let error;\n            if (reason instanceof RpcError)\n                error = reason;\n            else if (reason instanceof Error && reason.name === 'AbortError')\n                // aborted\n                error = new RpcError(reason.message, GrpcStatusCode[GrpcStatusCode.CANCELLED]);\n            else\n                // RpcErrors are thrown by us, everything else is an internal error\n                error = new RpcError(reason instanceof Error ? reason.message : \"\" + reason, GrpcStatusCode[GrpcStatusCode.INTERNAL]);\n            error.methodName = method.name;\n            error.serviceName = method.service.typeName;\n            defHeader.rejectPending(error);\n            responseStream.notifyError(error);\n            defStatus.rejectPending(error);\n            defTrailer.rejectPending(error);\n        });\n        return new ServerStreamingCall(method, (_d = opt.meta) !== null && _d !== void 0 ? _d : {}, input, defHeader.promise, responseStream, defStatus.promise, defTrailer.promise);\n    }\n    unary(method, input, options) {\n        var _a, _b, _c, _d;\n        let opt = options, format = (_a = opt.format) !== null && _a !== void 0 ? _a : 'text', fetchInit = (_b = opt.fetchInit) !== null && _b !== void 0 ? _b : {}, url = this.makeUrl(method, opt), inputBytes = method.I.toBinary(input, opt.binaryOptions), defHeader = new Deferred(), maybeMessage, defMessage = new Deferred(), maybeStatus, defStatus = new Deferred(), maybeTrailer, defTrailer = new Deferred();\n        globalThis.fetch(url, Object.assign(Object.assign({}, fetchInit), { method: 'POST', headers: createGrpcWebRequestHeader(new globalThis.Headers(), format, opt.timeout, opt.meta), body: createGrpcWebRequestBody(inputBytes, format), signal: (_c = options.abort) !== null && _c !== void 0 ? _c : null // node-fetch@3.0.0-beta.9 rejects `undefined`\n         }))\n            .then(fetchResponse => {\n            let [code, detail, meta] = readGrpcWebResponseHeader(fetchResponse);\n            defHeader.resolve(meta);\n            if (code != null && code !== GrpcStatusCode.OK)\n                throw new RpcError(detail !== null && detail !== void 0 ? detail : GrpcStatusCode[code], GrpcStatusCode[code], meta);\n            if (code != null)\n                maybeStatus = {\n                    code: GrpcStatusCode[code],\n                    detail: detail !== null && detail !== void 0 ? detail : GrpcStatusCode[code]\n                };\n            return fetchResponse;\n        })\n            .then(fetchResponse => {\n            if (!fetchResponse.body)\n                throw new RpcError('missing response body', GrpcStatusCode[GrpcStatusCode.INTERNAL]);\n            return readGrpcWebResponseBody(fetchResponse.body, fetchResponse.headers.get('content-type'), (type, data) => {\n                switch (type) {\n                    case GrpcWebFrame.DATA:\n                        if (maybeMessage)\n                            throw new RpcError(`unary call received 2nd message`, GrpcStatusCode[GrpcStatusCode.DATA_LOSS]);\n                        maybeMessage = method.O.fromBinary(data, opt.binaryOptions);\n                        break;\n                    case GrpcWebFrame.TRAILER:\n                        let code, detail;\n                        [code, detail, maybeTrailer] = readGrpcWebResponseTrailer(data);\n                        maybeStatus = {\n                            code: GrpcStatusCode[code],\n                            detail: detail !== null && detail !== void 0 ? detail : GrpcStatusCode[code]\n                        };\n                        break;\n                }\n            });\n        })\n            .then(() => {\n            if (!maybeTrailer && maybeMessage)\n                throw new RpcError(`missing trailers`, GrpcStatusCode[GrpcStatusCode.DATA_LOSS]);\n            // istanbul ignore if - this should be impossible and only here to satisfy TypeScript\n            if (!maybeStatus)\n                throw new RpcError(`missing status`, GrpcStatusCode[GrpcStatusCode.INTERNAL]);\n            if (!maybeMessage && maybeStatus.code === 'OK')\n                throw new RpcError('expected error status', GrpcStatusCode[GrpcStatusCode.DATA_LOSS]);\n            if (!maybeMessage)\n                throw new RpcError(maybeStatus.detail, maybeStatus.code, maybeTrailer);\n            defMessage.resolve(maybeMessage);\n            if (maybeStatus.code !== 'OK')\n                throw new RpcError(maybeStatus.detail, maybeStatus.code, maybeTrailer);\n            defStatus.resolve(maybeStatus);\n            defTrailer.resolve(maybeTrailer || {});\n        })\n            .catch(reason => {\n            let error;\n            if (reason instanceof RpcError)\n                error = reason;\n            else if (reason instanceof Error && reason.name === 'AbortError')\n                // aborted\n                error = new RpcError(reason.message, GrpcStatusCode[GrpcStatusCode.CANCELLED]);\n            else\n                // RpcErrors are thrown by us, everything else is an internal error\n                error = new RpcError(reason instanceof Error ? reason.message : \"\" + reason, GrpcStatusCode[GrpcStatusCode.INTERNAL]);\n            error.methodName = method.name;\n            error.serviceName = method.service.typeName;\n            defHeader.rejectPending(error);\n            defMessage.rejectPending(error);\n            defStatus.rejectPending(error);\n            defTrailer.rejectPending(error);\n        });\n        return new UnaryCall(method, (_d = opt.meta) !== null && _d !== void 0 ? _d : {}, input, defHeader.promise, defMessage.promise, defStatus.promise, defTrailer.promise);\n    }\n}\n"],
  "mappings": "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",
  "names": ["GrpcStatusCode", "GrpcWebFrame"]
}
